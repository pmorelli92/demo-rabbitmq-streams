// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: customers.sql

package gen_sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getCustomerByID = `-- name: GetCustomerByID :one
SELECT id, address FROM customers WHERE id = $1
`

type GetCustomerByIDRow struct {
	ID      string
	Address string
}

func (q *Queries) GetCustomerByID(ctx context.Context, id string) (GetCustomerByIDRow, error) {
	row := q.db.QueryRow(ctx, getCustomerByID, id)
	var i GetCustomerByIDRow
	err := row.Scan(&i.ID, &i.Address)
	return i, err
}

const upsertCustomer = `-- name: UpsertCustomer :exec
INSERT INTO customers(id, address, updated_at)
VALUES ($1, $2, $3)
ON CONFLICT (id) DO UPDATE SET
    address = EXCLUDED.address,
    updated_at = EXCLUDED.updated_at
WHERE EXCLUDED.updated_at > customers.updated_at
`

type UpsertCustomerParams struct {
	ID        string
	Address   string
	UpdatedAt pgtype.Timestamptz
}

func (q *Queries) UpsertCustomer(ctx context.Context, arg UpsertCustomerParams) error {
	_, err := q.db.Exec(ctx, upsertCustomer, arg.ID, arg.Address, arg.UpdatedAt)
	return err
}
