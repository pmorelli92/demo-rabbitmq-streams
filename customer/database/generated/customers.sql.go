// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: customers.sql

package gen_sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const insertCustomer = `-- name: InsertCustomer :exec
INSERT INTO customers(id, name, email, address, created_at)
VALUES ($1, $2, $3, $4, $5)
`

type InsertCustomerParams struct {
	ID        string
	Name      string
	Email     string
	Address   string
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) InsertCustomer(ctx context.Context, arg InsertCustomerParams) error {
	_, err := q.db.Exec(ctx, insertCustomer,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Address,
		arg.CreatedAt,
	)
	return err
}

const updateCustomerAddress = `-- name: UpdateCustomerAddress :one
UPDATE customers SET address = $1, updated_at = $2 WHERE id = $3
RETURNING id, name, email, address
`

type UpdateCustomerAddressParams struct {
	Address   string
	UpdatedAt pgtype.Timestamptz
	ID        string
}

type UpdateCustomerAddressRow struct {
	ID      string
	Name    string
	Email   string
	Address string
}

func (q *Queries) UpdateCustomerAddress(ctx context.Context, arg UpdateCustomerAddressParams) (UpdateCustomerAddressRow, error) {
	row := q.db.QueryRow(ctx, updateCustomerAddress, arg.Address, arg.UpdatedAt, arg.ID)
	var i UpdateCustomerAddressRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Address,
	)
	return i, err
}
